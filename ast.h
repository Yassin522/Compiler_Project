#ifndef AST_H
#define AST_H

#include <stdio.h>
#include <stdlib.h>


typedef enum {
  NODE_PROGRAM,
  NODE_DECLARATION_LIST,
  NODE_DECLARATION,
  NODE_VARIABLE_DECLARATION,
  NODE_VARIABLE_DECLARATION_LIST,
  NODE_VARIABLE_DECLARATION_IDENTIFIER,
  NODE_TYPE_SPECIFIER,
  NODE_FUNCTION_DECLARATION,
  NODE_FUNCTION_DECLARATION_PARAM_STATEMENT,
  NODE_PARAMETER_TYPE_LIST,
  NODE_PARAMETER_LIST,
  NODE_PARAMETER_DECLARATION,
  NODE_COMPOUND_STATEMENT,
  NODE_STATEMENT_LIST,
  NODE_STATEMENT,
  NODE_EXPRESSION_STATEMENT,
  NODE_SELECTION_STATEMENT,
  NODE_ITERATION_STATEMENT,
  NODE_JUMP_STATEMENT,
  NODE_EXPRESSION,
  NODE_ASSIGNMENT_EXPRESSION,
  NODE_ADDITION_EXPRESSION,
  NODE_MULTIPLICATION_EXPRESSION,
  NODE_PRIMARY_EXPRESSION,
  NODE_ID,
  NODE_CONSTANT,
  NODE_D

} ASTNodeType;

typedef struct ASTNode {
  ASTNodeType type;
  union {
    char *stringValue;
    int intValue;
    float floatValue;
  } value;
  struct ASTNode *leftChild;
  struct ASTNode *rightSibling;
} ASTNode;


ASTNode *createASTNode(ASTNodeType type);
void printAST(ASTNode *node, int indent);
int eval(ASTNode *node);

#endif
